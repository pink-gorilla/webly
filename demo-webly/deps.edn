{:paths ["src"
         "target/node_modules"  ; css png resources from npm modules (tailwind)
         ]
 :deps {org.pinkgorilla/webly {:local/root "../webly" :deps/manifest :deps}}
 :aliases
 {:outdated {:extra-deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}
             :main-opts ["-m" "antq.core"]}

  :test-clj {:extra-paths ["src"
                           "resources"
                           "test"
                           "test/resources"]
             :extra-deps {org.slf4j/slf4j-nop {:mvn/version "1.7.32"}
                          org.pinkgorilla/ui-repl {:mvn/version "0.0.34"} ; http cors test
                          io.github.cognitect-labs/test-runner
                          {:git/url "https://github.com/cognitect-labs/test-runner.git"
                           :sha "dd6da11611eeb87f08780a30ac8ea6012d4c05ce"}
                          ring/ring-mock {:mvn/version "0.4.0"}}
             :main-opts ["-m" "cognitect.test-runner"]
             :exec-fn cognitect.test-runner.api/test}

  :build {:deps {io.github.clojure/tools.build {:git/tag "v0.6.1" :git/sha "515b334"}
                 io.github.slipset/deps-deploy {:git/sha "b4359c5d67ca002d9ed0c4b41b710d7e5a82e3bf"}
                 io.github.seancorfield/build-clj {:git/tag "v0.5.4" :git/sha "bc9c0cc"}
                ;rewrite-clj/rewrite-clj {:mvn/version "1.0.699-alpha"}
                 babashka/fs {:mvn/version "0.0.5"}}
          :ns-default build}


  :deploy-jar
  {:replace-deps {slipset/deps-deploy {:mvn/version "0.2.0"}}
   :exec-fn deps-deploy.deps-deploy/deploy
   :exec-args {:installer :remote
               :artifact "target/webly.jar"}}

  :tailwind-girouette-webly
  {:exec-fn frontend.tailwind.generator/generate-tailwind-webly}

  :tailwind-girouette-usage
  {:ns-default girouette.processor
   :exec-fn process
   :exec-args {:source-paths ["src"]
               :css {;:output-file "target/webly/public/girouette.edn"
                     ;:output-format :css-classes
                     :output-file "target/webly/public/girouette.css"}
               :garden-fn frontend.tailwind.grammar/class-name->garden
               :apply-classes frontend.tailwind.css/composed-classes
               :watch? false}}

  :tailwind-girouette-list
  {:ns-default girouette.processor
   :exec-fn process
   :exec-args {:source-paths ["src"
                              "../frontend/src"]
               :css {:output-file "target/webly/public/girouette.edn"
                     :output-format :css-classes
                     :source-paths ["src"
                                    "../frontend/src"]}
               :garden-fn frontend.tailwind.grammar/class-name->garden
               :apply-classes frontend.tailwind.css/composed-classes
               :watch? false}}


  ; demo
  ; unit tests use demo profile for resource tests
  ; so the demo serves two puroses
  ; 1. ilustrate links in web-app
  ; 2. run unit tests 

  :demo-webly {:extra-paths ["src"
                             "resources"
                             "test"
                             "test/resources"]
               :extra-deps {org.slf4j/slf4j-nop {:mvn/version "1.7.32"}
                            org.pinkgorilla/ui-repl {:mvn/version "0.0.34"} ; http cors test
                            }
               :exec-fn webly.app.app/webly-run
               :exec-args {:config "demo.edn"
                           :profile "npm-install"}}



  ;
  }}