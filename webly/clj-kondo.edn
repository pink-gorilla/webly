{:linters
 {; see here for all options 
  ;https://github.com/clj-kondo/clj-kondo/blob/master/src/clj_kondo/impl/config.clj

  ;:lint-as 
  ;{org.httpkit.server/with-channel clj-kondo.lint-as/def-catch-all}

  :unused-namespace
  ; namespaces in this list are those we get for side-effects.
  ; it is also possible to do regex search here:
  ; https://github.com/borkdude/clj-kondo/blob/master/doc/config.md
  {:level :info
   :exclude [clojure.core.async
             cljs.core.async
             cljs.core.async.macros]}

  :unused-referred-var
  {:level :info
   :exclude {taoensso.timbre [trace tracef ; dont be strict in referring to logging functions 
                              debug debugf
                              info infof
                              warn warnf
                              error errorf]
             clojure.core.async [<! <!! >! >!! put! chan go go-loop]
             cljs.core.async  [<! <!! >! >!! put! chan go go-loop]
             cljs.core.async.macros [go go-loop]
             re-frame.core [reg-event-db dispatch]}}

  :unused-binding
  {:level :info}

  :unused-private-var
  {:level :info}


  :unresolved-symbol
  {:level :info
   ;:creates-vars {org.httpkit.server/with-channel [con]}
   :exclude [
             [webly.user.notifications.events [db]]
    ;         (org.httpkit.server/with-channel [con])
     ;        (pinkgorilla.nrepl.ws.httpkit-ws-relay [con])
             ]
   }

  ;:redundant-let
  ;{:level :info
  ; :exclude [pinkgorilla.events/kernel [kernel]]}

  :redundant-do
  {:level :info ; because the line below does not work, at least make them not ci breaking
   :exclude [pinkgorilla.nrepl.ws.relay/process-message-mem] ; TODO: this does not work 
   }




  ; linters end
  }}
