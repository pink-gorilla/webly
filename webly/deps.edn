{:paths ["src"
         "resources"  ; webly resources (svg/img)
         ]
 :deps {org.clojure/clojure {:mvn/version  "1.10.3"}
        org.clojure/core.async {:mvn/version  "1.3.618"}

        ; time
        com.andrewmcveigh/cljs-time {:mvn/version  "0.5.2"}

        ;; old
        ;; {ring.middleware.logger "0.5.0"}
        luminus/ring-ttl-session {:mvn/version "0.3.3"}
        ring-oauth2/ring-oauth2 {:mvn/version "0.1.5"}

        ; logging
        org.slf4j/slf4j-nop {:mvn/version "1.7.32"}
        ;org.slf4j/slf4j-api {:mvn/version "1.7.30"} ; slf4j-timbre is incmpatibe with slf4j-api 2.0.0 that comes with jetty

        ; webly/core
        clj-commons/pushy {:mvn/version "0.3.10"}
        com.cemerick/url {:mvn/version "0.1.1"}  ; url query-strings
        hiccup/hiccup {:mvn/version "1.0.5"}   ; server side templating
        girouette/girouette {:mvn/version "0.0.5"} ; tailwind config generation
        reagent/reagent {:mvn/version "1.1.0"} ; https://github.com/reagent-project/reagent
        re-frame/re-frame {:mvn/version "1.2.0"}
        cljs-ajax/cljs-ajax {:mvn/version "0.8.4"} ; needed for re-frame/http-fx
        day8.re-frame/http-fx {:mvn/version "0.2.3"}  ; reframe based http requests
        day8.re-frame/re-frame-10x {:mvn/version  "1.1.12"} ;; https://github.com/day8/re-frame-10x

        ;com.fzakaria/slf4j-timbre {:mvn/version  "0.3.21"} ; slf4j ->timbre adapter (used by jetty)

        ;day8.re-frame/tracing {:mvn/version  "0.6.2"} ; https://github.com/day8/re-frame-debux
        ;{day8.re-frame/tracing-stubs "0.6.2"}
        ;shadow
        ; shadow-cljs MAY NOT be a dependency in lein deps :tree -> if so, bundler
        ; will fail because shadow contains core.async which is not compatible with 
        ; self hosted clojurescript
        thheller/shadow-cljs {:mvn/version "2.15.2"}
                              ;:exclusions [org.clojure/tools.reader] ; outdated
        ;{thheller/shadow-cljsjs "0.0.21"}  ; already referred to from shadow-cljs
        org.clojure/clojurescript {:mvn/version "1.10.879"}

        ; modular
        org.pinkgorilla/modular {:mvn/version "0.0.7"}
        org.pinkgorilla/modular-oauth2 {:local/root "../oauth2" :deps/manifest :deps}
        org.pinkgorilla/modular-webserver {:local/root "../webserver" :deps/manifest :deps}
        org.pinkgorilla/modular-websocket {:local/root "../websocket" :deps/manifest :deps}
        org.pinkgorilla/modular-frontend {:local/root "../frontend" :deps/manifest :deps}}
 :aliases
 {:garamond
  {:main-opts ["-m" "garamond.main"]
   :extra-deps {com.workframe/garamond {:mvn/version "0.4.0"}}}

  ;https://github.com/applied-science/deps-library 1.0.861
  :release
  {:extra-deps {applied-science/deps-library {:mvn/version "0.4.0"}}
   :main-opts ["-m" "applied-science.deps-library"]}

  :jar
   ; alternative approach culd be depstar:
   ; If you do not sync the pom, depstar will take it as-is -- try :sync-pom false (or just remove that option, it should default to false).

  {:extra-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
   :exec-fn hf.depstar/jar
   :exec-args {;:pom-file "pom2.xml"
               :jar "target/webly.jar"
               :group-id "org.pinkgorilla"
               :artifact-id "webly"
               :sync-pom true
               ; :sync-pom -- if true, will run the equivalent of clojure -Spom to create or update your pom.xml file prior to building the JAR file
               :paths-only false
               ; :paths-only -- if true, only use :paths and :extra-paths from the project basis (and do not treat :local/root and :git/url 
               ; as providing source dependencies); new in 2.0.206
               :verbose true
               :jar-type :thin ; :uber
               }}

  :deploy-jar
  {:replace-deps {slipset/deps-deploy {:mvn/version "0.2.0"}}
   :exec-fn deps-deploy.deps-deploy/deploy
   :exec-args {:installer :remote
               :artifact "target/webly.jar"}}




  ; https://github.com/weavejester/cljfmt
  :cljfmt {:extra-deps {cljfmt/cljfmt {:mvn/version "RELEASE"}}
           :main-opts ["-m" "cljfmt.main"
                       "--indents" "cljfmt.edn"
                       ; "fix"  "check"
                       ]}

 ; https://github.com/clj-kondo/clj-kondo/blob/master/doc/jvm.md
  :lint {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
         :main-opts ["-m" "clj-kondo.main"
                     "--fail-level" "error"
                     "--config" "cljkondo.edn"
                     "--lint"]}

  :cloverage {:extra-paths ["test"]
              :extra-deps  {cloverage/cloverage {:mvn/version "RELEASE"}}
              :main-opts   ["-m" "cloverage.coverage"
                            "--src-ns-path" "src"
                            "--test-ns-path" "test"]
              :exec-fn     cloverage.coverage/run-project
              :exec-args   {:src-ns-path  ["src"]
                            :test-ns-path ["test"]}}

  :outdated {:extra-deps {com.github.liquidz/antq {:mvn/version "RELEASE"}}
             :main-opts ["-m" "antq.core"]}

  :check {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                        :sha "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
          :main-opts ["-m" "clj-check.check"]}

  ; demo
  ; unit tests use demo profile for resource tests
  ; so the demo serves two puroses
  ; 1. ilustrate links in web-app
  ; 2. run unit tests 

  :tailwind-girouette
  {:extra-deps {girouette/processor {:mvn/version "0.0.5"}}
   :ns-default girouette.processor
   :exec-fn process
   :exec-args {:css {:output-file "target/public/girouette.css"}
               :garden-fn webly.user.tailwind.grammar/class-name->garden
               :apply-classes webly.user.tailwind.css/composed-classes
               :watch? false
               #_#_:dry-run? true}}

  :test {:extra-paths ["test"
                       "test/resources"
                       ;"../demo-webly/resources"
                       ]
         :extra-deps {io.github.cognitect-labs/test-runner
                      {:git/url "https://github.com/cognitect-labs/test-runner.git"
                       :sha "4e7e1c0dfd5291fa2134df052443dc29695d8cbe"}
                      ring/ring-mock {:mvn/version "0.4.0"}
                      org.pinkgorilla/ui-repl {:mvn/version "0.0.34"} ; http cors test
                      org.pinkgorilla/modular-demo-webly {:local/root "../demo-webly" :deps/manifest :deps}}
         :main-opts ["-m" "cognitect.test-runner"]
         :exec-fn cognitect.test-runner.api/test}

  :ci {:extra-paths ["test"
                     "test/resources"
                     ;"profiles/demo/src"
                     ;"profiles/demo/resources"
                     ]
       :extra-deps  {org.pinkgorilla/modular-demo-webly {:local/root "../demo-webly" :deps/manifest :deps}
                     org.pinkgorilla/ui-repl {:mvn/version "0.0.34"} ; http cors test
                     }
       :exec-fn webly.user.app.app/webly-run
       :exec-args {:profile "ci"
                   :config "demo.edn"}}

  :webly-demo {:extra-deps  {org.pinkgorilla/modular-demo-webly {:local/root "../demo-webly" :deps/manifest :deps}
                             org.pinkgorilla/ui-repl {:mvn/version "0.0.34"} ; http cors test
                             }
               :exec-fn webly.user.app.app/webly-run
               :exec-args {:profile "watch2"  ;watch2 - 10x disabled
                           :config "demo.edn"}}



;
  }}

